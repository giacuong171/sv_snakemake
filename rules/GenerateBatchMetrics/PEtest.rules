rule extractSVEvidence_forPE:
    input:
        medmat = rules.T_CalcMedCov.output,
        bed = OUTPUT_DIR + "/GenerateBatchMetrics/All_Beds/SEP/" + BATCH + '.{chrom}.{source}.bed',
    output:
        tp = temp(OUTPUT_DIR + '/GenerateBatchMetrics/PEtest/evidence/local.{chrom}.{source}.PE.txt'),
        final = OUTPUT_DIR + '/GenerateBatchMetrics/PEtest/evidence/local.{chrom}.{source}.PE.txt.gz'
    params:
        ref_dict="resource/Homo_sapiens_assembly38.dict",
        mem=JV_MEM,
        window=1000
    singularity:
        "sif_images/gatk-nightly_latest.sif"
    shell:
        """
        awk -v OFS="\\t" '{{if ($2-{params.window}>0){{print $1,$2-{params.window},$2+{params.window}}}else{{print $1,0,$2+{params.window}}}}}' {input.bed}  >> tmp/region.{wildcards.chrom}.{wildcards.source}.bed
        awk -v OFS="\\t" '{{if ($3-{params.window}>0){{print $1,$3-{params.window},$3+{params.window}}}else{{print $1,0,$3+{params.window}}}}}' {input.bed}  >> tmp/region.{wildcards.chrom}.{wildcards.source}.bed
        sort -k1,1 -k2,2n tmp/region.{wildcards.chrom}.{wildcards.source}.bed > tmp/region.sorted.{wildcards.chrom}.{wildcards.source}.bed
        bedtools merge -d 16384 -i tmp/region.sorted.{wildcards.chrom}.{wildcards.source}.bed > tmp/region.merged.{wildcards.chrom}.{wildcards.source}.bed

        gatk --java-options "{params.mem}" PrintSVEvidence \\
            --sequence-dictionary {params.ref_dict} \\
            --evidence-file {input.medmat} \\
            -L tmp/region.merged.{wildcards.chrom}.{wildcards.source}.bed \\
            -O {output.tp}
        bgzip -c {output.tp} > {output.final}
        tabix -s1 -b2 -e2 {output.final}
        """

rule PEtest_autosome:
    input:
        medmat = rules.T_CalcMedCov.output,
        pe = OUTPUT_DIR + '/GatherBatchEvidence/MergeEvidence/' + BATCH + '.pe.txt.gz',
        vcf = OUTPUT_DIR + "/ClusterBatch/{source}/" + BATCH + ".{source}.{chrom}.ex.svtk.vcf.gz",
    output: 
        OUTPUT_DIR + "/GenerateBatchMetrics/PEtest/" + BATCH + ".{source}.{chrom}.stat"
    params:
        sample = OUTPUT_DIR + "/sample_list.txt",
    conda:
        "../../envs/genomeAD.yaml"
    wildcard_constraints:
        chrom='(' + '|'.join(AUTOSOMAL) + ')'
    threads: workflow.cores * 0.2
    shell:
        """
        svtk pe-test -o 1000 --common \\
            --medianfile {input.medmat} \\
            --samples {params.sample} \\
            {input.vcf} \\
            {input.pe} {output}
        """

rule PEtest_allosomes:
    input:
        medmat = rules.T_CalcMedCov.output,
        pe = OUTPUT_DIR + '/GatherBatchEvidence/MergeEvidence/' + BATCH + '.pe.txt.gz',
        vcf = OUTPUT_DIR + "/ClusterBatch/{source}/" + BATCH + ".{source}.{chrom}.ex.svtk.vcf.gz",
        whitelist = rules.make_sex_whitelists.output,
    output:
        OUTPUT_DIR + "/GenerateBatchMetrics/PEtest/allosome/" + BATCH + ".{source}.{chrom}.{sex}.stat"        
    wildcard_constraints:
        chrom='(' + '|'.join(['chrX','chrY']) + ')'
    conda: 
        "../../envs/genomeAD.yaml"
    threads: workflow.cores * 0.2
    shell:
         """
         svtk pe-test -o 1000 --common \\
            --medianfile {input.medmat} \\
            --samples {input.whitelist} \\
            {input.vcf} {input.pe} {output}
         """

rule merge_pe_allosomes:
    input:
        males= OUTPUT_DIR + "/GenerateBatchMetrics/PEtest/allosome/" + BATCH + ".{source}.{chrom}.males.stat",
        females = OUTPUT_DIR + "/GenerateBatchMetrics/PEtest/allosome/" + BATCH + ".{source}.{chrom}.females.stat"
    output:
        metrics = OUTPUT_DIR + "/GenerateBatchMetrics/PEtest/" + BATCH + ".{source}.{chrom}.stat"
    wildcard_constraints:
        chrom='(' + '|'.join(['chrX','chrY']) + ')'
    threads: 4
    run:
        males = pd.read_table(input.males)
        females = pd.read_table(input.females)
        if (wildcards.chrom == 'Y'):
            males.to_csv(output.metrics, sep='\t', index=False)
        else:
            male_only = females.log_pval.isnull()
            females.loc[male_only] = males
            females.to_csv(output.metrics, sep='\t', index=False, na_rep='NA')

rule MergeStats_PE:
    input:
        expand(OUTPUT_DIR + "/GenerateBatchMetrics/PEtest/" + BATCH + ".{source}.{chrom}.stat", source = ['manta','wham'],chrom=CONTIG_LIST)
    output:
        OUTPUT_DIR + '/GenerateBatchMetrics/Results/' + BATCH + '.PE.stats'
    threads: 2
    shell:
        """
        head -n 1 {input[0]} > {output}
        for f in {input}; do sed 1d $f >> {output}; done
        """